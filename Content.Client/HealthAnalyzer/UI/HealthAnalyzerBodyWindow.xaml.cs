using Content.Shared.Body.Systems;
using Content.Shared.MedicalScanner;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using System.Linq;

namespace Content.Client.HealthAnalyzer.UI;

[GenerateTypedNameReferences]
public sealed partial class HealthAnalyzerBodyWindow : BaseHealthAnalyzerWindow
{
    private readonly SharedBodySystem _bodySystem;

    public bool Updateable = true;

    public HealthAnalyzerBodyWindow()
    {
        RobustXamlLoader.Load(this);

        _bodySystem = EntityManager.System<SharedBodySystem>();
    }

    public override void Populate(HealthAnalyzerScannedUserMessage msg)
    {
        var uid = EntityManager.GetEntity(msg.TargetEntity);

        Entity<HealthAnalyzerBodyComponent>? ent;
        if (uid == null)
            ent = null;
        else
            ent = (uid.Value, EntityManager.GetComponent<HealthAnalyzerBodyComponent>(uid.Value));

        Tabs.RemoveAllChildren();
        foreach (var type in Enum.GetValues<HealthAnalyzerType>().Where(e => msg.Type.HasFlag(e)))
        {
            var tab = type switch
            {
                HealthAnalyzerType.Body => new HealthAnalyzerBodyBodyTab(ent, msg, this, EntityManager, _bodySystem, Prototypes, SpriteSystem),
                _ => throw new NotImplementedException()
            };

            Tabs.AddChild(tab);
        }
    }
}
