using Content.Client.UserInterface.Controls;
using Content.Client.UserInterface.Systems;
using Content.Shared.Atmos;
using Content.Shared.Damage.Prototypes;
using Content.Shared.FixedPoint;
using Content.Shared.Humanoid;
using Content.Shared.IdentityManagement;
using Content.Shared.MedicalScanner;
using Content.Shared.Mobs;
using Content.Shared.Mobs.Components;
using Content.Shared.Mobs.Systems;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.RichText;
using Robust.Client.UserInterface.XAML;
using Robust.Client.ResourceManagement;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;
using System.Numerics;

namespace Content.Client.HealthAnalyzer.UI;

[GenerateTypedNameReferences]
[Virtual]
public partial class BaseHealthAnalyzerWindow : FancyWindow
{
    protected readonly IEntityManager EntityManager;
    protected SpriteSystem SpriteSystem = default!;
    protected IPrototypeManager Prototypes = default!;
    protected IResourceCache Cache = default!;
    protected ProgressColorSystem ProgressColor = default!;
    private readonly MobThresholdSystem _mobThreshold = default!;

    public BaseHealthAnalyzerWindow()
    {
        RobustXamlLoader.Load(this);

        var dependencies = IoCManager.Instance!;
        EntityManager = dependencies.Resolve<IEntityManager>();
        SpriteSystem = EntityManager.System<SpriteSystem>();
        Prototypes = dependencies.Resolve<IPrototypeManager>();
        Cache = dependencies.Resolve<IResourceCache>();
        ProgressColor = EntityManager.System<ProgressColorSystem>();
        _mobThreshold = EntityManager.System<MobThresholdSystem>();
    }

    public virtual void Populate(HealthAnalyzerScannedUserMessage msg)
    {
    }

    public string GetStatus(MobState mobState)
    {
        return mobState switch
        {
            MobState.Alive => Loc.GetString("health-analyzer-window-entity-alive-text"),
            MobState.Critical or MobState.SoftCritical or MobState.HardCritical => Loc.GetString("health-analyzer-window-entity-critical-text"),
            MobState.Dead => Loc.GetString("health-analyzer-window-entity-dead-text"),
            _ => Loc.GetString("health-analyzer-window-entity-unknown-text"),
        };
    }

    private static string GetScanMode(bool? scanMode)
    {
        return scanMode.HasValue
            ? scanMode.Value
                ? Loc.GetString("health-analyzer-window-scan-mode-active")
                : Loc.GetString("health-analyzer-window-scan-mode-inactive")
            : Loc.GetString("health-analyzer-window-entity-unknown-text");
    }

    public void DrawScanMode(Label label, bool? scanMode)
    {
        label.Text = GetScanMode(scanMode);
        label.FontColorOverride = scanMode.HasValue && scanMode.Value ? Color.Green : Color.Red;
    }

    public void DrawPatient(SpriteView spriteView, TextureRect noDataTex, RichTextLabel nameLabel, Label speciesLabel, EntityUid target, bool? scanMode)
    {
        spriteView.SetEntity(target);
        spriteView.Visible = scanMode.HasValue && scanMode.Value;
        noDataTex.Visible = !spriteView.Visible;

        if (spriteView.Visible && spriteView.Sprite!.Rotation != Angle.Zero)
        {
            var angle = spriteView.Sprite!.Rotation / 2;
            spriteView.WorldRotation = angle;
            spriteView.EyeRotation = angle;
        }

        var name = new FormattedMessage();
        name.PushColor(Color.White);
        name.AddText(EntityManager.HasComponent<MetaDataComponent>(target) ? Identity.Name(target, EntityManager) : Loc.GetString("health-analyzer-window-entity-unknown-text"));
        nameLabel.SetMessage(name);

        speciesLabel.Text = EntityManager.TryGetComponent<HumanoidAppearanceComponent>(target, out var humanoidAppearanceComponent)
            ? Loc.GetString(Prototypes.Index(humanoidAppearanceComponent.Species).Name)
            : Loc.GetString("health-analyzer-window-entity-unknown-species-text");
    }

    public void DrawBasicDiagnostics(Label temperatureLabel, RichTextLabel bloodLabel, RichTextLabel statusLabel, RichTextLabel damageLabel, EntityUid target, float temperature, float bloodLevel, FixedPoint2 damage)
    {
        temperatureLabel.Text = !float.IsNaN(temperature) ? $"{temperature - Atmospherics.T0C:F1} °C ({temperature:F1} K)" : Loc.GetString("health-analyzer-window-entity-unknown-value-text");

        bloodLabel.Text = !float.IsNaN(bloodLevel)
            ? Loc.GetString("health-analyzer-color-label", ("color", ProgressColor.GetProgressColor(bloodLevel)), ("text", $"{bloodLevel * 100:F1} %"))
            : Loc.GetString("health-analyzer-window-entity-unknown-value-text");

        statusLabel.Text = EntityManager.TryGetComponent<MobStateComponent>(target, out var mobStateComponent)
            ? GetStatus(mobStateComponent.CurrentState)
            : Loc.GetString("health-analyzer-window-entity-unknown-text");

        if (_mobThreshold.TryGetDeadPercentage(target, damage, out var deadPercentage))
        {
            damageLabel.Text = Loc.GetString("health-analyzer-color-label", ("color", ProgressColor.GetProgressColor((float)Math.Abs(1 - (float)deadPercentage.Value))), ("text", damage.ToString()));
        }
        else
        {
            damageLabel.Text = damage.ToString();
        }
    }

    public bool DrawAlerts(BoxContainer alertsContainer, bool? unrevivable, bool? bleeding)
    {
        if (unrevivable != true && bleeding != true)
            return false;

        alertsContainer.DisposeAllChildren();

        if (unrevivable == true)
        {
            alertsContainer.AddChild(new RichTextLabel
            {
                Text = Loc.GetString("health-analyzer-window-entity-unrevivable-text"),
                Margin = new Thickness(0, 4),
                MaxWidth = 300
            });
        }

        if (bleeding == true)
        {
            alertsContainer.AddChild(new RichTextLabel
            {
                Text = Loc.GetString("health-analyzer-window-entity-bleeding-text"),
                Margin = new Thickness(0, 4),
                MaxWidth = 300
            });
        }

        return true;
    }

    public List<BoxContainer> DrawDiagnosticGroups(Dictionary<string, FixedPoint2> groups, IReadOnlyDictionary<string, FixedPoint2> damageDict, float scale = 1f)
    {
        List<BoxContainer> containers = [];

        foreach (var (damageGroupId, damageAmount) in groups)
        {
            if (damageAmount == 0)
                continue;

            var groupTitleText = $"{Loc.GetString(
                "health-analyzer-window-damage-group-text",
                ("damageGroup", Prototypes.Index<DamageGroupPrototype>(damageGroupId).LocalizedName),
                ("amount", damageAmount)
            )}";

            var groupContainer = new BoxContainer
            {
                Align = BoxContainer.AlignMode.Begin,
                Orientation = BoxContainer.LayoutOrientation.Vertical,
            };

            groupContainer.AddChild(CreateDiagnosticGroupTitle(groupTitleText, damageGroupId, scale));
            containers.Add(groupContainer);

            // Show the damage for each type in that group.
            var group = Prototypes.Index<DamageGroupPrototype>(damageGroupId);

            foreach (var type in group.DamageTypes)
            {
                if (!damageDict.TryGetValue(type, out var typeAmount) || typeAmount <= 0)
                    continue;

                var damageString = Loc.GetString(
                    "health-analyzer-window-damage-type-text",
                    ("damageType", Prototypes.Index<DamageTypePrototype>(type).LocalizedName),
                    ("amount", typeAmount)
                );

                groupContainer.AddChild(CreateDiagnosticItemLabel(damageString.Insert(0, " · "), scale));
            }
        }

        return containers;
    }

    private Texture GetTexture(string texture)
    {
        var rsiPath = new ResPath("/Textures/Objects/Devices/health_analyzer.rsi");
        var rsiSprite = new SpriteSpecifier.Rsi(rsiPath, texture);

        var rsi = Cache.GetResource<RSIResource>(rsiSprite.RsiPath).RSI;
        if (!rsi.TryGetState(rsiSprite.RsiState, out _))
            rsiSprite = new SpriteSpecifier.Rsi(rsiPath, "unknown");

        return SpriteSystem.Frame0(rsiSprite);
    }

    private static RichTextLabel CreateDiagnosticItemLabel(string text, float scale)
    {
        return new RichTextLabel()
        {
            Text = $"[font size={Math.Round(FontTag.DefaultSize * scale)}]{text}[/font]"
        };
    }

    private BoxContainer CreateDiagnosticGroupTitle(string text, string id, float scale)
    {
        var rootContainer = new BoxContainer
        {
            Margin = new Thickness(0, 6 * scale, 0, 3 * scale),
            VerticalAlignment = VAlignment.Bottom,
            Orientation = BoxContainer.LayoutOrientation.Horizontal,
        };

        rootContainer.AddChild(new TextureRect
        {
            SetSize = new Vector2(30 * scale, 30 * scale),
            TextureScale = new Vector2(scale, scale),
            Texture = GetTexture(id.ToLower())
        });

        rootContainer.AddChild(CreateDiagnosticItemLabel(text, scale));

        return rootContainer;
    }
}
