using Content.Shared.Atmos;
using Content.Shared.Body.Systems;
using Content.Shared.Damage;
using Content.Shared.FixedPoint;
using Content.Shared.Humanoid;
using Content.Shared.Humanoid.Prototypes;
using Content.Shared.IdentityManagement;
using Content.Shared.MedicalScanner;
using Content.Shared.Mobs.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;
using System.Linq;

namespace Content.Client.HealthAnalyzer.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class HealthAnalyzerWindow : BaseHealthAnalyzerWindow
    {
        private readonly SharedBodySystem _bodySystem;

        public HealthAnalyzerWindow()
        {
            RobustXamlLoader.Load(this);

            var dependencies = IoCManager.Instance!;
            _bodySystem = _entityManager.System<SharedBodySystem>();
        }

        public override void Populate(HealthAnalyzerScannedUserMessage msg)
        {
            var target = _entityManager.GetEntity(msg.TargetEntity);

            DamageSpecifier damage = new();

            if (target != null)
            {
                var bodyDamage = _bodySystem.GetBodyDamage(target.Value);

                if (bodyDamage != null)
                {
                    damage = bodyDamage;
                }
                else if (_entityManager.TryGetComponent<DamageableComponent>(target, out var damageable))
                {
                    damage = damageable.Damage;
                }
                else
                {
                    target = null;
                }
            }

            if (target == null)
            {
                NoPatientDataText.Visible = true;
                return;
            }

            NoPatientDataText.Visible = false;

            // Scan Mode

            ScanModeLabel.Text = msg.ScanMode.HasValue
                ? msg.ScanMode.Value
                    ? Loc.GetString("health-analyzer-window-scan-mode-active")
                    : Loc.GetString("health-analyzer-window-scan-mode-inactive")
                : Loc.GetString("health-analyzer-window-entity-unknown-text");

            ScanModeLabel.FontColorOverride = msg.ScanMode.HasValue && msg.ScanMode.Value ? Color.Green : Color.Red;

            // Patient Information

            SpriteView.SetEntity(target.Value);
            SpriteView.Visible = msg.ScanMode.HasValue && msg.ScanMode.Value;
            NoDataTex.Visible = !SpriteView.Visible;

            var name = new FormattedMessage();
            name.PushColor(Color.White);
            name.AddText(_entityManager.HasComponent<MetaDataComponent>(target.Value)
                ? Identity.Name(target.Value, _entityManager)
                : Loc.GetString("health-analyzer-window-entity-unknown-text"));
            NameLabel.SetMessage(name);

            SpeciesLabel.Text =
                _entityManager.TryGetComponent<HumanoidAppearanceComponent>(target.Value,
                    out var humanoidAppearanceComponent)
                    ? Loc.GetString(_prototypes.Index<SpeciesPrototype>(humanoidAppearanceComponent.Species).Name)
                    : Loc.GetString("health-analyzer-window-entity-unknown-species-text");

            // Basic Diagnostic

            TemperatureLabel.Text = !float.IsNaN(msg.Temperature)
                ? $"{msg.Temperature - Atmospherics.T0C:F1} Â°C ({msg.Temperature:F1} K)"
                : Loc.GetString("health-analyzer-window-entity-unknown-value-text");

            BloodLabel.Text = !float.IsNaN(msg.BloodLevel)
                ? $"{msg.BloodLevel * 100:F1} %"
                : Loc.GetString("health-analyzer-window-entity-unknown-value-text");

            StatusLabel.Text =
                _entityManager.TryGetComponent<MobStateComponent>(target.Value, out var mobStateComponent)
                    ? GetStatus(mobStateComponent.CurrentState)
                    : Loc.GetString("health-analyzer-window-entity-unknown-text");

            // Total Damage

            DamageLabel.Text = damage.GetTotal().ToString();

            // Alerts

            var showAlerts = msg.Unrevivable == true || msg.Bleeding == true;

            AlertsDivider.Visible = showAlerts;
            AlertsContainer.Visible = showAlerts;

            if (showAlerts)
                AlertsContainer.DisposeAllChildren();

            if (msg.Unrevivable == true)
                AlertsContainer.AddChild(new RichTextLabel
                {
                    Text = Loc.GetString("health-analyzer-window-entity-unrevivable-text"),
                    Margin = new Thickness(0, 4),
                    MaxWidth = 300
                });

            if (msg.Bleeding == true)
                AlertsContainer.AddChild(new RichTextLabel
                {
                    Text = Loc.GetString("health-analyzer-window-entity-bleeding-text"),
                    Margin = new Thickness(0, 4),
                    MaxWidth = 300
                });

            // Damage Groups

            var damageSortedGroups =
                damage.GetDamagePerGroup(_prototypes).OrderByDescending(damage => damage.Value)
                    .ToDictionary(x => x.Key, x => x.Value);

            IReadOnlyDictionary<string, FixedPoint2> damagePerType = damage.DamageDict;


            GroupsContainer.RemoveAllChildren();
            foreach (var container in DrawDiagnosticGroups(damageSortedGroups, damagePerType))
                GroupsContainer.AddChild(container);
        }
    }
}
