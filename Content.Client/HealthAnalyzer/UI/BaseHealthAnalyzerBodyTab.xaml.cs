using System.Diagnostics.CodeAnalysis;
using Content.Shared.Body.Systems;
using Content.Shared.FixedPoint;
using Content.Shared.MedicalScanner;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.HealthAnalyzer.UI;

[GenerateTypedNameReferences]
[Virtual]
public partial class BaseHealthAnalyzerBodyTab : PanelContainer
{
    protected readonly IEntityManager EntityManager;
    protected readonly SharedBodySystem BodySystem;
    protected readonly HealthAnalyzerBodyWindow HealthAnalyzerWindow;
    protected readonly IPrototypeManager PrototypeManager;
    protected readonly SpriteSystem SpriteSystem;

    public BaseHealthAnalyzerBodyTab(HealthAnalyzerBodyWindow window, IEntityManager entityManager, SharedBodySystem bodySystem, IPrototypeManager prototypeManager, SpriteSystem spriteSystem)
    {
        EntityManager = entityManager;
        BodySystem = bodySystem;
        HealthAnalyzerWindow = window;
        PrototypeManager = prototypeManager;
        SpriteSystem = spriteSystem;

        RobustXamlLoader.Load(this);
    }

    public virtual void Populate(Entity<HealthAnalyzerBodyComponent>? target, HealthAnalyzerScannedUserMessage msg)
    {
        if (target == null || !TryGetTotalDamage(target.Value, out var damage))
        {
            NoPatientDataText.Visible = true;
            return;
        }

        NoPatientDataText.Visible = false;

        HealthAnalyzerWindow.DrawScanMode(ScanModeLabel, msg.ScanMode);
        HealthAnalyzerWindow.DrawPatient(SpriteView, NoDataTex, NameLabel, SpeciesLabel, target.Value, msg.ScanMode);
        HealthAnalyzerWindow.DrawBasicDiagnostics(TemperatureLabel, BloodLabel, StatusLabel, DamageLabel, target.Value, msg.Temperature, msg.BloodLevel, damage.Value);

        var showAlerts = HealthAnalyzerWindow.DrawAlerts(AlertsContainer, msg.Unrevivable, msg.Bleeding);
        AlertsDivider.Visible = showAlerts;
        AlertsContainer.Visible = showAlerts;

        LimbButton.RemoveAllChildren();

        foreach (var button in GetButtons(target.Value))
            LimbButton.AddChild(button);

        HealthAnalyzerWindow.Updateable = true;

        LimbButton.OnPressed += args =>
        {
            if (!HealthAnalyzerWindow.Updateable)
                return;

            foreach (var child in LimbButton.Children)
            {
                if (child is not HealthAnalyzerBodyButton button)
                    continue;

                if (!button.IsSelected(args.Event.RelativePosition, LimbButton.Size))
                    continue;

                ButtonPressed(button);
                break;
            }

            HealthAnalyzerWindow.Updateable = false;
        };

        ActOnButton();
        DrawDamageSidebar();
    }

    protected virtual bool TryGetTotalDamage(Entity<HealthAnalyzerBodyComponent> target, [NotNullWhen(true)] out FixedPoint2? totalDamage)
    {
        totalDamage = null;
        return false;
    }

    protected virtual IEnumerable<HealthAnalyzerBodyButton> GetButtons(Entity<HealthAnalyzerBodyComponent> target)
    {
        yield break;
    }

    protected virtual void DrawDamageSidebar()
    {
    }

    protected virtual void ButtonPressed(HealthAnalyzerBodyButton button)
    {
    }

    protected virtual void ActOnButton()
    {
    }

    protected static void UpdateProgressBar(HealthAnalyzerBodyProgressBar progressBar, string suffix, float totalDamage, float maxDamage)
    {
        progressBar.ProgressLabel.Text = Loc.GetString($"health-analyzer-body-{suffix}");

        progressBar.ProgressTex.Progress = Math.Abs(totalDamage / maxDamage - 1);
        progressBar.ProgressText.Text = $"{maxDamage - totalDamage}/{maxDamage}";

        progressBar.Visible = true;
    }

    protected HealthAnalyzerBodyProgressBar GetProgressBar(HealthAnalyzerBodyItemBarPosition position)
    {
        return position switch
        {
            HealthAnalyzerBodyItemBarPosition.TopLeft => ProgressBarTopLeft,
            HealthAnalyzerBodyItemBarPosition.TopCenter => ProgressBarTopCenter,
            HealthAnalyzerBodyItemBarPosition.TopRight => ProgressBarTopRight,

            HealthAnalyzerBodyItemBarPosition.MiddleLeft => ProgressBarMiddleLeft,
            HealthAnalyzerBodyItemBarPosition.MiddleCenter => ProgressBarMiddleCenter,
            HealthAnalyzerBodyItemBarPosition.MiddleRight => ProgressBarMiddleRight,

            HealthAnalyzerBodyItemBarPosition.BottomLeft => ProgressBarBottomLeft,
            HealthAnalyzerBodyItemBarPosition.BottomCenter => ProgressBarBottomCenter,
            HealthAnalyzerBodyItemBarPosition.BottomRight => ProgressBarBottomRight,

            _ => throw new NotImplementedException(),
        };
    }
}
