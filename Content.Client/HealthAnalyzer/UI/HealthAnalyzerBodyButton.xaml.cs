using System.Numerics;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;

namespace Content.Client.HealthAnalyzer.UI;

[GenerateTypedNameReferences]
public sealed partial class HealthAnalyzerBodyButton : TextureRect, IHealthAnalyzerBodyButton
{
    private readonly SpriteSpecifier _hoverSprite;
    private readonly SpriteSpecifier _selectedSprite;

    private readonly Texture _hoverTexture;
    private readonly Texture _selectedTexture;

    public object? Identifier { get; set; }
    public EntityUid? Owner { get; set; }

    public HealthAnalyzerBodyButton(object identifier, EntityUid owner, SpriteSpecifier hoverSprite, SpriteSpecifier selectedSprite, SpriteSystem spriteSystem)
    {
        RobustXamlLoader.Load(this);

        Identifier = identifier;
        Owner = owner;

        _hoverSprite = hoverSprite;
        _selectedSprite = selectedSprite;

        _hoverTexture = spriteSystem.Frame0(_hoverSprite);
        _selectedTexture = spriteSystem.Frame0(_selectedSprite);

        Texture = _hoverTexture;
    }

    public bool IsSelected(Vector2 clickRelative, Vector2 buttonSize)
    {
        var scale = _selectedTexture.Size / buttonSize;
        var pixel = scale * clickRelative;

        var color = _selectedTexture.GetPixel((int)Math.Round(pixel.X), (int)Math.Round(pixel.Y));

        return color.A > 0;
    }

    public void Selected()
    {
        Texture = _selectedTexture;
    }

    public void Deseclected()
    {
        Texture = _hoverTexture;
    }
}
