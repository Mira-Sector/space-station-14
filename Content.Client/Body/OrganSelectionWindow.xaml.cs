using Content.Shared.Body.Organ;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using System.Linq;

namespace Content.Client.Body;

[GenerateTypedNameReferences]
public sealed partial class OrganSelectionWindow : DefaultWindow
{
    private const int RowCount = 4;

    public OrganSelectionWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    public void UpdateState(OrganSelectionBoundUserInterfaceState state)
    {
        OrganList.RemoveAllChildren();

        var entMan = IoCManager.Resolve<EntityManager>();
        var row = NewRow();

        var i = 0;
        foreach (var (type, netId) in state.Organs.OrderBy(x => x.Key))
        {
            i++;

            if (i > RowCount)
            {
                OrganList.AddChild(row);
                row = NewRow();
                i = 0;
            }

            var uid = entMan.GetEntity(netId);

            var button = new OrganSelectionButton(uid, type);
            row.AddChild(button);
        }
    }

    private BoxContainer NewRow()
    {
        return new BoxContainer()
        {
            Orientation = BoxContainer.LayoutOrientation.Horizontal,
            Margin = new Thickness(8)
        };
    }
}
