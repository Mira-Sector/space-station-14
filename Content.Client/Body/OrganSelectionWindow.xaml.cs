using Content.Shared.Body.Organ;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using System.Linq;

namespace Content.Client.Body;

[GenerateTypedNameReferences]
public sealed partial class OrganSelectionWindow : DefaultWindow
{
    private const int RowCount = 4;

    public OrganSelectionWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    public void UpdateState(EntityUid limb, OrganSelectionBoundUserInterfaceState state)
    {
        OrganList.RemoveAllChildren();

        var entMan = IoCManager.Resolve<EntityManager>();

        HashSet<OrganSelectionButton> buttons = new();

        foreach (var (type, netId) in state.Organs.OrderBy(x => x.Key))
        {
            if (buttons.Count >= RowCount)
            {
                OrganList.AddChild(new OrganSelectionRow(buttons));
                buttons.Clear();
            }

            var uid = entMan.GetEntity(netId);

            var button = new OrganSelectionButton(uid, type);
            buttons.Add(button);
        }

        OrganList.AddChild(new OrganSelectionRow(buttons));
        LimbIcon.SetEntity(limb);
    }
}
