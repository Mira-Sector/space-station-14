using System.Numerics;
using Content.Client.UserInterface.Controls;
using Content.Shared.Teleportation.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.UserInterface.Controls;


namespace Content.Client.Teleportation.Ui;

[GenerateTypedNameReferences]
public sealed partial class TeleporterConsoleUI : FancyWindow
{
    public HashSet<TeleportPoint> Beacons = new();
    //public Vector2 Coordinates = new Vector2(0, 0);
    public event Action<bool>? SendClicked;
    public event Action<bool>? ReceiveClicked;
    public event Action<TeleportPoint>? BeaconClicked;
    public event Action<string>? OnCoordsXChanged;
    public event Action<string>? OnCoordsYChanged;

    public TeleporterConsoleUI()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        //CoordsX.OnTextEntered += e => OnCoordsXChanged?.Invoke(e.Text);
        CoordsX.OnFocusExit += e => OnCoordsXChanged?.Invoke(e.Text);

        //CoordsY.OnTextEntered += e => OnCoordsYChanged?.Invoke(e.Text);
        CoordsY.OnFocusExit += e => OnCoordsYChanged?.Invoke(e.Text);

        //BeaconButton.OnPressed += _ => BeaconClicked.invoke();
        SendToButton.OnPressed += _ => SendClicked?.Invoke(true);
        ReceiveFromButton.OnPressed += _ => ReceiveClicked?.Invoke(false);
    }

    public void AddBeaconButtons()
    {
        var logMan = IoCManager.Resolve<ILogManager>();
        var log = logMan.RootSawmill;

        foreach (var beacon in Beacons)
        {
            var name = beacon.Location;
            var teleportPoint = beacon.TelePoint;
            var currentButtonRef = new Button
            {
                Text = name,
                TextAlign = Label.AlignMode.Right,
                HorizontalAlignment = HAlignment.Center,
                VerticalAlignment = VAlignment.Center,
                HorizontalExpand = true,
                SizeFlagsStretchRatio = 1,
                MinSize = new Vector2(300, 20),
                ClipText = true,
            };

            currentButtonRef.OnPressed += _ => BeaconClicked?.Invoke(beacon);
            BeaconButtonContainer.AddChild(currentButtonRef);
        }
    }

    public void SetLinkName(string link)
    {
        LinkLabel.Text = link;
    }

    public void SetCoordsX(string x)
    {
        CoordsX.Text = x;
    }
    public void SetCoordsY(string y)
    {
        CoordsY.Text = y;
    }
    public void UpdateTeleportSummary(string summary)
    {
        SummaryLabel.Text = summary;
    }
    public void UpdateTeleportButtons(bool valid)
    {
        SendToButton.Disabled = !valid;
        ReceiveFromButton.Disabled = !valid;
    }

}
