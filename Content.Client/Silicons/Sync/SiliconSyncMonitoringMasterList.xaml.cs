using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using Robust.Shared.Utility;
using System.Linq;

namespace Content.Client.Silicons.Sync;

[GenerateTypedNameReferences]
public sealed partial class SiliconSyncMonitoringMasterList : PanelContainer
{
    [Dependency] private readonly IEntityManager _entity = default!;

    public event Action<EntityUid, EntityCoordinates>? OnSlavePressed;

    public SiliconSyncMonitoringMasterList(EntityUid master, Dictionary<EntityUid, EntityCoordinates> slaves)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        var name = _entity.GetComponent<MetaDataComponent>(master).EntityName;
        var message = new FormattedMessage();
        message.AddMarkupOrThrow(Loc.GetString("ai-sync-monitoring-master-wrap", ("name", name)));
        MasterName.SetMessage(message);

        foreach (var (slave, coords) in slaves)
        {
            var button = new SiliconSyncMonitoringSlaveButton(slave);
            SlaveList.AddChild(button);

            button.SlaveButton.OnPressed += _ => OnSlavePressed?.Invoke(slave, coords);
        }

        NoSlaveLabel.Visible = !slaves.Any();
    }
}
