using Content.Client.UserInterface.Controls;
using Content.Shared.Prototypes;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;
using System.Linq;

namespace Content.Client.Silicons.Sync;

[GenerateTypedNameReferences]
public sealed partial class SiliconSyncMonitoringWindow : FancyWindow
{
    [Dependency] private readonly IEntityManager _entity = default!;
    [Dependency] private readonly IPrototypeManager _prototype = default!;
    private readonly SpriteSystem _sprite = default!;

    [ViewVariables]
    public List<SiliconSyncMonitoringMasterList> MasterLists = [];

    public SiliconSyncMonitoringWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _sprite = _entity.System<SpriteSystem>();
    }

    public void ShowSlaves(Dictionary<NetEntity, Dictionary<NetEntity, NetCoordinates>> masterSlaves, Dictionary<NetEntity, ProtoId<NavMapBlipPrototype>> slaveBlips, EntityUid console)
    {
        MasterList.RemoveAllChildren();
        MasterLists.Clear();
        NavMap.TrackedEntities.Clear();
        NavMap.Owner = console;
        NavMap.MapUid = _entity.GetComponent<TransformComponent>(console).GridUid;

        var anyMasters = false;

        foreach (var (masterNet, slavesNet) in masterSlaves)
        {
            var master = _entity.GetEntity(masterNet);

            if (_entity.GetComponentOrNull<MetaDataComponent>(master)?.Deleted != false)
                return;

            Dictionary<EntityUid, EntityCoordinates> slaves = [];

            foreach (var (slaveNet, netCoords) in slavesNet)
            {
                var slave = _entity.GetEntity(slaveNet);
                if (!slaveBlips.TryGetValue(slaveNet, out var blipId))
                    continue;

                if (_entity.GetComponentOrNull<MetaDataComponent>(slave)?.Deleted != false)
                    return;

                if (!_prototype.TryIndex(blipId, out var blip))
                    continue;

                if (blip.TexturePaths == null || !blip.TexturePaths.Any())
                    continue;

                var coords = _entity.GetCoordinates(netCoords);

                var blipTexture = _sprite.Frame0(new SpriteSpecifier.Texture(blip.TexturePaths[0]));

                NavMap.TrackedEntities.Add(slaveNet, new(coords, blipTexture, blip.Color, blip.Blinks, true, blip.Scale));
                slaves.Add(slave, coords);
            }

            var list = new SiliconSyncMonitoringMasterList(master, slaves);
            MasterLists.Add(list);
            MasterList.AddChild(list);

            list.OnSlavePressed += (slave, coords) => NavMap.CenterToCoordinates(coords);

            anyMasters = true;
        }

        NoMasterLabel.Visible = !anyMasters;

        if (MasterLists.Any())
            MasterLists.Last().MasterDivider.Visible = false;
    }

}
