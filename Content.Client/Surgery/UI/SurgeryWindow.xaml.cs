using System.Linq;
using Content.Client.UserInterface.Controls;
using Content.Shared.Body.Organ;
using Content.Shared.Body.Part;
using Content.Shared.Surgery;
using Content.Shared.Surgery.Components;
using Content.Shared.Surgery.Systems;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.Surgery.UI;

[GenerateTypedNameReferences]
public sealed partial class SurgeryWindow : FancyWindow
{
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;

    private readonly SpriteSystem _spriteSystem;
    private readonly SharedSurgerySystem _surgerySystem;

    private ISurgeryReceiver? _receiver;
    private EntityUid? _receiverUid;
    private BodyPart? _bodyPart;
    private EntityUid? _body;
    private EntityUid? _limb;

    public SurgeryWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _spriteSystem = _entityManager.System<SpriteSystem>();
        _surgerySystem = _entityManager.System<SharedSurgerySystem>();

        GraphView.NodeClicked += OnNodeClicked;
        GraphView.EdgeClicked += OnEdgeClicked;
    }

    public void UpdateState(EntityUid? target)
    {
        if (target == null)
        {
            _receiver = null;
            _receiverUid = null;
            _bodyPart = null;
            _body = null;
            _limb = null;

            LimbButtons.RemoveAllChildren();
            GraphDetails.RemoveAllChildren();

            GraphView.ChangeGraph(null, null, null, null, null);
            UpdateSurgeries();
            return;
        }

        var buttons = GetSurgeryReceiverButtons(target.Value);

        if (_body == target && buttons.Count() == LimbButtons.ChildCount)
        {
            if (_receiver != null)
                GraphView.CurrentNode = _receiver.CurrentNode;

            return;
        }

        if (_entityManager.HasComponent<SurgeryReceiverBodyComponent>(target))
        {
            _body = target;
        }
        else if (_entityManager.HasComponent<SurgeryReceiverComponent>(target))
        {
            _receiverUid = target;
            _surgerySystem.GetBodyAndLimb(target.Value, out _limb, out _body, out _bodyPart);
        }

        LimbButtons.RemoveAllChildren();
        GraphDetails.RemoveAllChildren();
        GraphView.ChangeGraph(null, null, null, null, null);

        foreach (var button in buttons)
            LimbButtons.AddChild(button);

        UpdateSurgeries();
    }

    private IEnumerable<BaseSurgeryReceiverButton> GetSurgeryReceiverButtons(EntityUid target)
    {
        // this is done so they arent intermingled with limb buttons
        List<SurgeryOrganButton> organButtons = [];

        foreach (var (receiverUid, part, receiver) in GetLimbSurgeries(target))
        {
            if (part != null)
            {
                var limbButton = new SurgeryLimbButton(receiver, part, _spriteSystem);
                limbButton.OnToggled += args => OnReceiverButtonPressed(receiver, receiverUid, receiverUid, part, args);
                yield return limbButton;
            }
            else if (_entityManager.TryGetComponent<OrganComponent>(receiverUid, out var organComp))
            {
                var organButton = new SurgeryOrganButton(receiver, organComp.OrganType, _prototypeManager, _spriteSystem);
                organButton.OnToggled += args => OnReceiverButtonPressed(receiver, receiverUid, null, null, args);
                organButtons.Add(organButton);
                continue;
            }

            if (receiverUid == null)
                continue;

            if (!_entityManager.TryGetComponent<AllowOrganSurgeryComponent>(receiverUid.Value, out var allowOrganSurgery))
                continue;

            foreach (var organ in allowOrganSurgery.Organs)
            {
                var organComp = _entityManager.GetComponent<OrganComponent>(organ);
                var organReceiver = _entityManager.GetComponent<SurgeryReceiverComponent>(organ);

                var organButton = new SurgeryOrganButton(organReceiver, organComp.OrganType, _prototypeManager, _spriteSystem);
                organButton.OnToggled += args => OnReceiverButtonPressed(organReceiver, organ, receiverUid, part, args);
                organButtons.Add(organButton);
            }
        }

        foreach (var organButton in organButtons)
            yield return organButton;
    }

    private IEnumerable<(EntityUid?, BodyPart?, ISurgeryReceiver)> GetLimbSurgeries(EntityUid target)
    {
        if (_entityManager.TryGetComponent<SurgeryReceiverComponent>(target, out var surgeryReceiver))
        {
            _surgerySystem.GetBodyAndLimb(target, out _, out _, out var bodyPart);
            yield return (target, bodyPart, surgeryReceiver);
            yield break;
        }

        if (!_entityManager.TryGetComponent<SurgeryReceiverBodyComponent>(target, out var surgeryReceiverBody))
            yield break;

        HashSet<BodyPart> limbs = [];
        limbs.EnsureCapacity(surgeryReceiverBody.Limbs.Count);

        foreach (var (bodyPart, netLimb) in surgeryReceiverBody.Limbs)
        {
            var limbUid = _entityManager.GetEntity(netLimb);
            surgeryReceiver = _entityManager.GetComponent<SurgeryReceiverComponent>(limbUid);

            limbs.Add(bodyPart);
            yield return (limbUid, bodyPart, surgeryReceiver);
        }

        foreach (var receiver in surgeryReceiverBody.Surgeries)
        {
            // still have a limb
            // dont show limbless surgery
            if (limbs.Contains(receiver.BodyPart))
                continue;

            yield return (null, receiver.BodyPart, receiver.Surgeries);
        }
    }

    private void UpdateSurgeries()
    {
        SurgeryButtons.RemoveAllChildren();

        if (_receiver == null)
            return;

        foreach (var surgery in _receiver.AvailableSurgeries)
        {
            var button = new SurgerySurgeryButton(surgery, _prototypeManager);
            button.OnToggled += args => OnSurgeryButtonPressed(_receiver, surgery, args);
            SurgeryButtons.AddChild(button);
        }
    }

    private void OnReceiverButtonPressed(ISurgeryReceiver receiver, EntityUid? receiverUid, EntityUid? limb, BodyPart? part, BaseButton.ButtonToggledEventArgs args)
    {
        if (!args.Pressed)
        {
            _receiver = null;
            _receiverUid = null;
            _bodyPart = null;
            _limb = null;
            UpdateSurgeries();
            GraphView.ChangeGraph(null, null, null, null, null);
            return;
        }

        _receiver = receiver;
        _receiverUid = receiverUid;
        _bodyPart = part;
        _limb = limb;
        UpdateSurgeries();
        GraphView.ChangeGraph(_receiver.Graph, _receiverUid, _body, _limb, _bodyPart);

        GraphView.CurrentNode = _receiver.CurrentNode;

        foreach (var control in LimbButtons.Children)
        {
            if (control is not BaseSurgeryReceiverButton button)
                continue;

            if (button.Receiver != receiver)
                button.Pressed = false;
        }
    }

    private void OnSurgeryButtonPressed(ISurgeryReceiver receiver, ProtoId<SurgeryPrototype> surgeryId, BaseButton.ButtonToggledEventArgs args)
    {
        if (!args.Pressed)
        {
            GraphView.HighlightedNodes = [];
            return;
        }

        var surgery = _prototypeManager.Index(surgeryId);

        var receiverStartingNode = receiver.Graph.Nodes[receiver.Graph.StartingNode];
        var surgeryStartingNode = surgery.Nodes[surgery.StartingNode];

        HashSet<SurgeryNode> highlightedNodes = [];
        highlightedNodes.EnsureCapacity(surgery.Nodes.Count);

        Queue<SurgeryNode> queue = [];
        queue.Enqueue(surgeryStartingNode);

        HashSet<SurgeryNode> visitedNodes = [];
        visitedNodes.EnsureCapacity(surgery.Nodes.Count);

        Dictionary<SurgeryNode, SurgeryNode> nodeMap = [];
        nodeMap.Add(surgeryStartingNode, receiverStartingNode);

        while (queue.TryDequeue(out var surgeryNode))
        {
            if (!visitedNodes.Add(surgeryNode))
                break;

            if (!nodeMap.TryGetValue(surgeryNode, out var receiverNode))
                continue;

            highlightedNodes.Add(receiverNode);

            SharedSurgerySystem.GetMatchingEdges(surgeryNode, receiverNode, out var matchingEdges, out _);
            foreach (var (surgeryEdge, receiverEdge) in matchingEdges)
            {
                if (!surgery.TryFindNode(surgeryEdge.Connection, out var surgeryConnection))
                    continue;

                if (!receiver.Graph.TryFindNode(receiverEdge.Connection, out var receiverConnection))
                    continue;

                if (visitedNodes.Contains(surgeryConnection))
                    continue;

                queue.Enqueue(surgeryConnection);
                nodeMap.Add(surgeryConnection, receiverConnection);
            }
        }

        GraphView.HighlightedNodes = highlightedNodes;

        foreach (var control in SurgeryButtons.Children)
        {
            if (control is not SurgerySurgeryButton button)
                continue;

            if (button.Surgery != surgeryId)
                button.Pressed = false;
        }
    }

    private void OnNodeClicked(SurgeryNode node)
    {
        GraphDetails.RemoveAllChildren();
        var details = new SurgeryNodeDetails(node, _receiverUid!.Value, _body, _limb, _bodyPart);
        GraphDetails.AddChild(details);
    }

    private void OnEdgeClicked(SurgeryEdge edge)
    {
        GraphDetails.RemoveAllChildren();
        var details = new SurgeryEdgeDetails(edge, _receiverUid!.Value, _body, _limb, _bodyPart);
        GraphDetails.AddChild(details);
    }
}
