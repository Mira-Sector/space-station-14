using System.Linq;
using Content.Client.UserInterface.Controls;
using Content.Shared.Body.Part;
using Content.Shared.Surgery;
using Content.Shared.Surgery.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.Surgery.UI;

[GenerateTypedNameReferences]
public sealed partial class SurgeryWindow : FancyWindow
{
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;

    private ISurgeryReceiver? _receiver;

    public SurgeryWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    public void UpdateState(Entity<SurgeryReceiverBodyComponent>? target)
    {
        LimbButtons.RemoveAllChildren();

        if (target == null)
        {
            _receiver = null;
            GraphView.ChangeGraph(null);
            UpdateSurgeries();
            return;
        }

        foreach (var (part, receiver) in GetLimbSurgeries(target.Value))
        {
            var button = new SurgeryLimbButton(part);
            button.OnPressed += _ => OnLimbButtonPressed(receiver);
            LimbButtons.AddChild(button);
        }

        UpdateSurgeries();
    }

    private Dictionary<BodyPart, ISurgeryReceiver> GetLimbSurgeries(Entity<SurgeryReceiverBodyComponent> target)
    {
        Dictionary<BodyPart, ISurgeryReceiver> limbSurgeries = [];
        foreach (var (bodyPart, netLimb) in target.Comp.Limbs)
        {
            var limbUid = _entityManager.GetEntity(netLimb);
            var surgeryReceiver = _entityManager.GetComponent<SurgeryReceiverComponent>(limbUid);

            limbSurgeries[bodyPart] = surgeryReceiver;
        }

        foreach (var receiver in target.Comp.Surgeries)
        {
            // still have a limb
            // dont show limbless surgery
            if (limbSurgeries.ContainsKey(receiver.BodyPart))
                continue;

            limbSurgeries[receiver.BodyPart] = receiver.Surgeries;
        }

        return limbSurgeries;
    }

    private void UpdateSurgeries()
    {
        SurgeryButtons.RemoveAllChildren();

        if (_receiver == null)
            return;

        foreach (var surgery in _receiver.AvailableSurgeries)
        {
            var button = new SurgerySurgeryButton(surgery);
            button.OnPressed += _ => OnSurgeryButtonPressed(surgery);
            SurgeryButtons.AddChild(button);
        }
    }

    private void OnLimbButtonPressed(ISurgeryReceiver receiver)
    {
        _receiver = receiver;
        UpdateSurgeries();
        GraphView.ChangeGraph(_receiver.Graph);
    }

    private void OnSurgeryButtonPressed(ProtoId<SurgeryPrototype> surgeryId)
    {
        var surgery = _prototypeManager.Index(surgeryId);
        GraphView.HighlightedNodes = surgery.Nodes.Values.ToHashSet();
    }
}
