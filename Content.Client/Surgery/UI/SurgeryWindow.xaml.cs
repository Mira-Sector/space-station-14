using Content.Client.UserInterface.Controls;
using Content.Shared.Body.Part;
using Content.Shared.Surgery;
using Content.Shared.Surgery.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.Surgery.UI;

[GenerateTypedNameReferences]
public sealed partial class SurgeryWindow : FancyWindow
{
    [Dependency] private readonly IEntityManager _entityManager = default!;

    private SurgeryGraph? _selectedGraph;

    private List<ISurgeryReceiver> _surgeries = [];

    public SurgeryWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    public void UpdateState(Entity<SurgeryReceiverBodyComponent>? target)
    {
        LimbButtons.RemoveAllChildren();

        if (target == null)
        {
            _selectedGraph = null;
            _surgeries = [];
            GraphView.ChangeGraph(_selectedGraph);
            UpdateSurgeries();
            return;
        }

        foreach (var (part, surgeries) in GetLimbSurgeries(target.Value))
        {
            var button = new SurgeryLimbButton(part);
            button.OnPressed += _ => OnLimbButtonPressed(surgeries);
            LimbButtons.AddChild(button);
        }

        UpdateSurgeries();
    }

    private Dictionary<BodyPart, List<ISurgeryReceiver>> GetLimbSurgeries(Entity<SurgeryReceiverBodyComponent> target)
    {
        Dictionary<BodyPart, List<ISurgeryReceiver>> limbSurgeries = [];
        foreach (var (bodyPart, netLimb) in target.Comp.Limbs)
        {
            var limbUid = _entityManager.GetEntity(netLimb);
            var surgeryReceiver = _entityManager.GetComponent<SurgeryReceiverComponent>(limbUid);

            if (!limbSurgeries.TryGetValue(bodyPart, out var partSurgeries))
            {
                partSurgeries = [];
                limbSurgeries[bodyPart] = partSurgeries;
            }
            partSurgeries.Add(surgeryReceiver);
        }

        foreach (var receiver in target.Comp.Surgeries)
        {
            if (!limbSurgeries.TryGetValue(receiver.BodyPart, out var partSurgeries))
            {
                partSurgeries = [];
                limbSurgeries[receiver.BodyPart] = partSurgeries;
            }
            partSurgeries.Add(receiver.Surgeries);
        }

        return limbSurgeries;
    }

    private void UpdateSurgeries()
    {
        SurgeryButtons.RemoveAllChildren();

        foreach (var surgery in _surgeries)
        {
            var button = new SurgerySurgeryButton(surgery);
            button.OnPressed += _ => OnSurgeryButtonPressed(surgery);
            SurgeryButtons.AddChild(button);
        }
    }

    private void OnLimbButtonPressed(List<ISurgeryReceiver> surgeries)
    {
        _surgeries = surgeries;
        UpdateSurgeries();
    }

    private void OnSurgeryButtonPressed(ISurgeryReceiver surgery)
    {
        _selectedGraph = surgery.Graph;
        GraphView.ChangeGraph(_selectedGraph);
    }
}
