using Content.Client.UserInterface.Controls;
using Content.Shared.Body.Part;
using Content.Shared.Surgery;
using Content.Shared.Surgery.Components;
using Content.Shared.Surgery.Systems;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.Surgery.UI;

[GenerateTypedNameReferences]
public sealed partial class SurgeryWindow : FancyWindow
{
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;

    private ISurgeryReceiver? _receiver;
    private Entity<SurgeryReceiverBodyComponent>? _target = null;

    public SurgeryWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    public void UpdateState(Entity<SurgeryReceiverBodyComponent>? target)
    {
        if (_target == target)
        {
            if (_receiver != null)
                GraphView.CurrentNode = _receiver.CurrentNode;

            return;
        }

        _target = target;

        LimbButtons.RemoveAllChildren();

        if (target == null)
        {
            _receiver = null;
            GraphView.ChangeGraph(null);
            UpdateSurgeries();
            return;
        }

        foreach (var (part, receiver) in GetLimbSurgeries(target.Value))
        {
            var button = new SurgeryLimbButton(receiver, part);
            button.OnToggled += args => OnLimbButtonPressed(receiver, args);
            LimbButtons.AddChild(button);
        }

        UpdateSurgeries();
    }

    private Dictionary<BodyPart, ISurgeryReceiver> GetLimbSurgeries(Entity<SurgeryReceiverBodyComponent> target)
    {
        Dictionary<BodyPart, ISurgeryReceiver> limbSurgeries = [];
        foreach (var (bodyPart, netLimb) in target.Comp.Limbs)
        {
            var limbUid = _entityManager.GetEntity(netLimb);
            var surgeryReceiver = _entityManager.GetComponent<SurgeryReceiverComponent>(limbUid);

            limbSurgeries[bodyPart] = surgeryReceiver;
        }

        foreach (var receiver in target.Comp.Surgeries)
        {
            // still have a limb
            // dont show limbless surgery
            if (limbSurgeries.ContainsKey(receiver.BodyPart))
                continue;

            limbSurgeries[receiver.BodyPart] = receiver.Surgeries;
        }

        return limbSurgeries;
    }

    private void UpdateSurgeries()
    {
        SurgeryButtons.RemoveAllChildren();

        if (_receiver == null)
            return;

        foreach (var surgery in _receiver.AvailableSurgeries)
        {
            var button = new SurgerySurgeryButton(surgery);
            button.OnToggled += args => OnSurgeryButtonPressed(_receiver, surgery, args);
            SurgeryButtons.AddChild(button);
        }
    }

    private void OnLimbButtonPressed(ISurgeryReceiver receiver, BaseButton.ButtonToggledEventArgs args)
    {
        if (!args.Pressed)
        {
            _receiver = null;
            UpdateSurgeries();
            GraphView.ChangeGraph(null);
            return;
        }

        _receiver = receiver;
        UpdateSurgeries();
        GraphView.ChangeGraph(_receiver.Graph);

        GraphView.CurrentNode = _receiver.CurrentNode;

        foreach (var control in LimbButtons.Children)
        {
            if (control is not SurgeryLimbButton button)
                continue;

            if (button.Receiver != receiver)
                button.Pressed = false;
        }
    }

    private void OnSurgeryButtonPressed(ISurgeryReceiver receiver, ProtoId<SurgeryPrototype> surgeryId, BaseButton.ButtonToggledEventArgs args)
    {
        if (!args.Pressed)
        {
            GraphView.HighlightedNodes = [];
            return;
        }

        var surgery = _prototypeManager.Index(surgeryId);

        var receiverStartingNode = receiver.Graph.Nodes[receiver.Graph.StartingNode];
        var surgeryStartingNode = surgery.Nodes[surgery.StartingNode];

        HashSet<SurgeryNode> highlightedNodes = [];
        highlightedNodes.EnsureCapacity(surgery.Nodes.Count);

        Queue<SurgeryNode> queue = [];
        queue.Enqueue(surgeryStartingNode);

        HashSet<SurgeryNode> visitedNodes = [];
        visitedNodes.EnsureCapacity(surgery.Nodes.Count);

        Dictionary<SurgeryNode, SurgeryNode> nodeMap = [];
        nodeMap.Add(surgeryStartingNode, receiverStartingNode);

        while (queue.TryDequeue(out var surgeryNode))
        {
            if (!visitedNodes.Add(surgeryNode))
                break;

            if (!nodeMap.TryGetValue(surgeryNode, out var receiverNode))
                continue;

            highlightedNodes.Add(receiverNode);

            SharedSurgerySystem.GetMatchingEdges(surgeryNode, receiverNode, out var matchingEdges, out _);
            foreach (var (surgeryEdge, receiverEdge) in matchingEdges)
            {
                if (!surgery.TryFindNode(surgeryEdge.Connection, out var surgeryConnection))
                    continue;

                if (!receiver.Graph.TryFindNode(receiverEdge.Connection, out var receiverConnection))
                    continue;

                if (visitedNodes.Contains(surgeryConnection))
                    continue;

                queue.Enqueue(surgeryConnection);
                nodeMap.Add(surgeryConnection, receiverConnection);
            }
        }

        GraphView.HighlightedNodes = highlightedNodes;

        foreach (var control in SurgeryButtons.Children)
        {
            if (control is not SurgerySurgeryButton button)
                continue;

            if (button.Surgery != surgeryId)
                button.Pressed = false;
        }
    }
}
