using Content.Shared.Body.Part;
using Content.Shared.Surgery;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.Surgery.UI;

[GenerateTypedNameReferences]
public sealed partial class SurgeryNodeDetails : PanelContainer
{
    [Dependency] private readonly IEntityManager _entity = default!;

    private readonly SpriteSystem _sprite;

    public SurgeryNodeDetails(SurgeryNode node, EntityUid receiver, EntityUid? body, EntityUid? limb, BodyPart part) : base()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _sprite = _entity.System<SpriteSystem>();

        Tabs.RemoveAllChildren();
        foreach (var special in node.Special)
        {
            var tab = new SurgeryNodeDetailsTab(special, receiver, body, limb, part, _sprite);
            Tabs.AddChild(tab);
        }

        Tabs.Visible = Tabs.ChildCount > 0;
    }
}
