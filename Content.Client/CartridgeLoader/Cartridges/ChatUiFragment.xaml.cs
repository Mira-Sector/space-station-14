using Content.Shared.CartridgeLoader;
using Content.Shared.CartridgeLoader.Cartridges;
using Content.Shared.PDA.Messaging.Events;
using Content.Shared.PDA.Messaging.Messages;
using Content.Shared.PDA.Messaging.Recipients;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.CartridgeLoader.Cartridges;

[GenerateTypedNameReferences]
public sealed partial class ChatUiFragment : PanelContainer
{
    [Dependency] private readonly IEntityManager _entity = default!;
    [Dependency] private readonly IPrototypeManager _prototype = default!;
    private readonly BoundUserInterface _userInterface = default!;

    public Action<IChatMessage>? OnSendMessage;

    private readonly EntityUid _cartridge;
    private readonly NetEntity _netCartridge; // so much shit references it
    private ChatUiMode _uiMode;
    private IChatRecipient _recipient = default!; // not nullable as never accessed when this isnt valid

    private Dictionary<IChatRecipient, IChatMessage[]> _messages = [];

    public ChatUiFragment(BoundUserInterface userInterface, EntityUid cartridge)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _userInterface = userInterface;
        _cartridge = cartridge;
        _netCartridge = _entity.GetNetEntity(cartridge);

        Popup.SetPositionLast();

        ChangeMode(ChatUiMode.Menu);
    }

    public void UpdateState(Dictionary<IChatRecipient, IChatMessage[]> messages)
    {
        _messages = messages;
        ChangeMode(_uiMode);
    }

    private void ChangeMode(ChatUiMode mode)
    {
        _uiMode = mode;

        Content.RemoveAllChildren();

        switch (mode)
        {
            case ChatUiMode.Menu:
                var menu = new ChatUiFragmentMenu(_messages.Keys, _prototype);
                Content.AddChild(menu);

                menu.OnRecipientClicked += recipient =>
                {
                    _recipient = recipient;
                    ChangeMode(ChatUiMode.Chat);
                };
                break;

            case ChatUiMode.Chat:
                var messages = _messages[_recipient];
                var chat = new ChatUiFragmentChat(_recipient, messages, _prototype);
                Content.AddChild(chat);
                break;
        }
    }

    private void SendUiMessage(IPdaMessagePayload payload)
    {
        var message = new ChatUiMessageEvent(payload);
        var cartridgeMessage = new CartridgeUiMessage(message);
        _userInterface.SendPredictedMessage(cartridgeMessage);
    }
}
