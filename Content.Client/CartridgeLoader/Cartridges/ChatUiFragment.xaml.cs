using Content.Shared.CartridgeLoader;
using Content.Shared.CartridgeLoader.Cartridges;
using Content.Shared.PDA.Messaging.Events;
using Content.Shared.PDA.Messaging.Messages;
using Content.Shared.PDA.Messaging.Recipients;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.CartridgeLoader.Cartridges;

[GenerateTypedNameReferences]
public sealed partial class ChatUiFragment : PanelContainer
{
    [Dependency] private readonly IEntityManager _entity = default!;
    [Dependency] private readonly IPrototypeManager _prototype = default!;
    private readonly BoundUserInterface _userInterface = default!;

    [ViewVariables]
    private ChatUiMode _uiMode;

    private readonly EntityUid _cartridge;
    private readonly NetEntity _netCartridge; // so much shit references it
    private BasePdaChatMessageable? _recipient = null;
    private PdaChatRecipientProfile _profile = default!;

    private Dictionary<BasePdaChatMessageable, BasePdaChatMessage[]> _messages = [];

    public event Action<BasePdaChatMessageable?>? OnRecipientChanged;
    public event Action<ChatUiMode>? OnModeChanged;

    public ChatUiFragment(BoundUserInterface userInterface, EntityUid cartridge)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _userInterface = userInterface;
        _cartridge = cartridge;
        _netCartridge = _entity.GetNetEntity(cartridge);

        Popup.SetPositionLast();

        InitMode(ChatUiMode.Menu);
    }

    public void UpdateState(PdaChatRecipientProfile profile, Dictionary<BasePdaChatMessageable, BasePdaChatMessage[]> messages)
    {
        _messages = messages;
        _profile = profile;
        ChangeMode(_uiMode);
    }

    public void ChangeMode(ChatUiMode mode)
    {
        if (_uiMode != mode)
            InitMode(mode);

        UpdateMode(mode);
    }

    private void InitMode(ChatUiMode mode)
    {
        _uiMode = mode;

        Content.RemoveAllChildren();
        Popup.RemoveAllChildren();

        var (control, fragment) = GetNewModeControl(mode);
        Content.AddChild(control);

        fragment.OnPopupAdd += popup =>
        {
            Popup.RemoveAllChildren();
            Popup.AddChild(popup);

            popup.OnClosePopup += () => Popup.RemoveAllChildren();
        };

        OnModeChanged?.Invoke(mode);
    }

    private void UpdateMode(ChatUiMode mode)
    {
        switch (mode)
        {
            case ChatUiMode.Menu:
                var menu = GetContent<ChatUiFragmentMenu>();
                menu.UpdateState(_messages.Keys, _prototype);
                break;

            case ChatUiMode.Settings:
                var settings = GetContent<ChatUiFragmentSettings>();
                settings.UpdateState(_profile, _recipient);
                break;

            case ChatUiMode.Chat:
                var messages = _messages[_recipient!];
                var chat = GetContent<ChatUiFragmentChat>();
                chat.UpdateState(_recipient!, _profile, messages, _prototype);
                break;
        }

        OnModeChanged?.Invoke(mode);
    }

    private (Control, IChatUiFragmentMode) GetNewModeControl(ChatUiMode mode)
    {
        switch (mode)
        {
            case ChatUiMode.Menu:
                var menu = new ChatUiFragmentMenu();
                menu.OnSettingsButtonPressed += () => ChangeMode(ChatUiMode.Settings);
                menu.OnRecipientClicked += recipient =>
                {
                    ChangeRecipient(recipient);
                    ChangeMode(ChatUiMode.Chat);
                };

                return (menu, menu);

            case ChatUiMode.Settings:
                var settings = new ChatUiFragmentSettings();
                settings.OnHomeButtonPressed += () => ChangeMode(ChatUiMode.Menu);
                settings.OnBackButtonPressed += recipient =>
                {
                    ChangeRecipient(recipient);
                    ChangeMode(ChatUiMode.Chat);
                };

                return (settings, settings);

            case ChatUiMode.Chat:
                var chat = new ChatUiFragmentChat();
                chat.OnMessageSent += message => SendUiMessage(new PdaMessageSendMessageSourceEvent(_netCartridge, message));
                chat.OnHomeButtonPressed += () => ChangeMode(ChatUiMode.Menu);
                chat.OnSettingsButtonPressed += () => ChangeMode(ChatUiMode.Settings);

                return (chat, chat);

            default:
                throw new NotImplementedException();
        }
    }

    private T GetContent<T>() where T : IChatUiFragmentMode
    {
        foreach (var child in Content.Children)
        {
            if (child is T control)
                return control;
        }

        return default!;
    }

    public void ChangeRecipient(BasePdaChatMessageable? recipient)
    {
        _recipient = recipient;
        OnRecipientChanged?.Invoke(recipient);
    }

    private void SendUiMessage(IPdaMessagePayload payload)
    {
        var message = new ChatUiMessageEvent(payload);
        var cartridgeMessage = new CartridgeUiMessage(message);
        _userInterface.SendPredictedMessage(cartridgeMessage);
    }
}
