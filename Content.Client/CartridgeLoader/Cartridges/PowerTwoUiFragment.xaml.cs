using Content.Shared.CartridgeLoader.Cartridges;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Input;
using Robust.Shared.Timing;
using System.Numerics;

namespace Content.Client.CartridgeLoader.Cartridges;

[GenerateTypedNameReferences]
public sealed partial class PowerTwoUiFragment : PanelContainer
{
    [Dependency] private readonly IGameTiming _timing = default!;

    private Vector2 _dragStart;

    private PowerTwoGameState _gameState;

    public Action<PowerTwoDirection>? OnDragged;

    public PowerTwoUiFragment() : base()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        MouseFilter = MouseFilterMode.Stop;

        Popup.SetPositionLast();
    }

    public void UpdateState(PowerTwoGameState gameState, int?[] grid, Vector2i gridSize, int maxValue, TimeSpan startTime)
    {
        _gameState = gameState;

        GameGridRows.RemoveAllChildren();
        Popup.RemoveAllChildren();

        for (var y = 0; y < gridSize.Y; y++)
        {
            var row = new PowerTwoUiGridRow();

            for (var x = 0; x < gridSize.X; x++)
            {
                var index = SharedPowerTwoCartridgeSystem.ConvertToFlattenedIndex(new(x, y), gridSize);
                var value = grid[index];
                var cell = new PowerTwoUiCell(value, maxValue);
                row.AddChild(cell);
            }

            GameGridRows.AddChild(row);
        }

        if (gameState == PowerTwoGameState.InGame)
            return;

        var timeDelta = _timing.CurTime - startTime;

        var text = gameState switch
        {
            PowerTwoGameState.GameOver => Loc.GetString("power-two-popup-game-over"),
            PowerTwoGameState.Win => Loc.GetString("power-two-popup-win"),
            _ => throw new NotImplementedException()
        };

        var popup = new PowerTwoUiPopup(text, timeDelta);
        Popup.AddChild(popup);
    }

    protected override void KeyBindDown(GUIBoundKeyEventArgs args)
    {
        base.KeyBindDown(args);

        if (_gameState != PowerTwoGameState.InGame)
            return;

        if (args.Function != EngineKeyFunctions.UIClick)
            return;

        _dragStart = args.RelativePosition;
    }

    protected override void KeyBindUp(GUIBoundKeyEventArgs args)
    {
        base.KeyBindUp(args);

        if (_gameState != PowerTwoGameState.InGame)
            return;

        if (args.Function != EngineKeyFunctions.UIClick)
            return;

        var delta = args.RelativePosition - _dragStart;
        var direction = delta.GetPowerTwoDir();
        OnDragged?.Invoke(direction);
    }
}
