using Content.Client.PDA.Messaging.Messages;
using Content.Shared.PDA.Messaging.Messages;
using Content.Shared.PDA.Messaging.Recipients;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.CartridgeLoader.Cartridges;

[GenerateTypedNameReferences]
public sealed partial class ChatUiFragmentChat : BoxContainer, IChatUiFragmentMode
{
    [Dependency] private readonly IEntityManager _entity = default!;
    [Dependency] private readonly IClientPdaChatMessageFactory _pdaChatMessageFactory = default!;


    public Action<BasePdaChatMessage>? OnMessageSent;

    public ChatUiFragmentChat(IPdaChatRecipient recipient, PdaChatRecipientProfile profile, BasePdaChatMessage[] messages, IPrototypeManager prototype)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        var sprite = _entity.System<SpriteSystem>();

        ContactIcon.Texture = sprite.Frame0(recipient.GetUiIcon(prototype));
        ContactName.Text = Loc.GetString(recipient.GetUiName());

        TextInput.OnTextEntered += args =>
        {
            var message = new PdaChatMessageText()
            {
                Contents = args.Text,
                Sender = profile,
                Recipient = recipient,
            };

            OnMessageSent?.Invoke(message);

            TextInput.Clear();
        };

        foreach (var message in messages)
        {
            var wrapper = new ChatUiFragmentMessageWrapper(message, _pdaChatMessageFactory);
            Messages.AddChild(wrapper);
        }
    }
}
