using System.Numerics;
using Content.Client.UserInterface.Controls;
using Content.Shared.Teleportation.Components;
using Content.Shared.Telescience.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.UserInterface.Controls;


namespace Content.Client.Telescience.Ui;

[GenerateTypedNameReferences]
public sealed partial class TeleframeConsoleWindow : FancyWindow
{
    public HashSet<TeleportPoint> Beacons = new();
    //public Vector2 Coordinates = new Vector2(0, 0);
    public event Action<bool>? SendClicked;
    public event Action<bool>? ReceiveClicked;
    public event Action<TeleportPoint>? BeaconClicked;
    public event Action<bool, string>? RefreshClicked;
    public event Action<int>? OnCoordsXChanged;
    public event Action<int>? OnCoordsYChanged;

    public TeleframeConsoleWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        CoordsX.OnValueChanged += e => OnCoordsXChanged?.Invoke((int)e.Value);

        CoordsY.OnValueChanged += e => OnCoordsYChanged?.Invoke((int)e.Value);

        SendToButton.OnPressed += _ => SendClicked?.Invoke(true);
        ReceiveFromButton.OnPressed += _ => ReceiveClicked?.Invoke(false);
        RefreshButton.OnPressed += _ => RefreshClicked?.Invoke(SendToButton.Disabled, SummaryLabel.Text!);
    }

    public void AddBeaconButtons() //adds beacon buttons, these have already been checked for validity, so add away.
    {
        foreach (var beacon in Beacons)
        {
            var name = beacon.Location;
            var teleportPoint = beacon.TelePoint;
            var currentButtonRef = new Button //really want square buttons it looks cooler
            {
                Text = name,
                TextAlign = Label.AlignMode.Right,
                HorizontalAlignment = HAlignment.Center,
                VerticalAlignment = VAlignment.Center,
                HorizontalExpand = true,
                SizeFlagsStretchRatio = 1,
                MinSize = new Vector2(295, 20),
                SetSize = new Vector2(495, 30),
                //StyleClasses= "ButtonSquare",
                ClipText = true,
            };
            currentButtonRef.OnPressed += _ => BeaconClicked?.Invoke(beacon);
            BeaconButtonContainer.AddChild(currentButtonRef);
        }
    }

    public void SetLinkName(string link) //updates Teleframe link name
    {
        LinkLabel.Text = link;
    }

    public void SetCoordsX(int x) //updates X Coordinate text
    {
        CoordsX.Value = x;
    }
    public void SetCoordsY(int y) //updates Y Coordinate text
    {
        CoordsY.Value = y;
    }
    public void UpdateTeleportSummary(string summary) //updates Teleport Summary
    {
        SummaryLabel.Text = summary;
    }
    public void UpdateTeleportButtons(bool valid) //enables/disables Teleframe buttons
    {
        SendToButton.Disabled = !valid;
        ReceiveFromButton.Disabled = !valid;
    }

}
