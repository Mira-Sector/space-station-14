using Content.Client.Stylesheets;
using Content.Shared.Traits;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;

namespace Content.Client.Lobby.UI.Roles;

[GenerateTypedNameReferences]
public sealed partial class TraitPreferenceSelector : Control
{
    private SpriteSystem _spriteSystem;

    public int Cost;

    public bool Preference
    {
        get => Selected.Pressed;
        set => Selected.Pressed = value;
    }

    public bool Enabled
    {
        get => Selected.StyleClasses.Contains(StyleBase.ButtonCaution);

        set
        {
            if (value)
            {
                if (Selected.StyleClasses.Contains(StyleBase.ButtonCaution))
                    return;

                Selected.StyleClasses.Add(StyleBase.ButtonCaution);
            }
            else if (Selected.StyleClasses.Contains(StyleBase.ButtonCaution))
            {
                Selected.StyleClasses.Remove(StyleBase.ButtonCaution);
            }
        }
    }

    public event Action<bool>? PreferenceChanged;

    public TraitPreferenceSelector(TraitPrototype trait, SpriteSystem sprite)
    {
        RobustXamlLoader.Load(this);

        _spriteSystem = sprite;

        TraitName.SetMessage(FormattedMessage.FromUnformatted(Loc.GetString(trait.Name)));
        TraitPoints.Text = trait.Cost.ToString();
        TraitDescription.SetMessage(FormattedMessage.FromUnformatted(Loc.GetString(trait.Description)));

        Color color;

        if (trait.Cost < 0)
            color = Color.IndianRed;
        else if (trait.Cost > 0)
            color = Color.ForestGreen;
        else
            color = Color.RoyalBlue;

        if (trait.Icon is {} icon)
        {
            TraitIcon.Texture = _spriteSystem.Frame0(icon);
        }

        NameContainer.PanelOverride = new StyleBoxFlat(color);

        Cost = trait.Cost;
        Selected.OnToggled += OnSelectedToggled;
    }

    private void OnSelectedToggled(BaseButton.ButtonToggledEventArgs args)
    {
        PreferenceChanged?.Invoke(Preference);
    }
}
