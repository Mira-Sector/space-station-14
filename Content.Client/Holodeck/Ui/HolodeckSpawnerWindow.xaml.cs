using Content.Client.UserInterface.Controls;
using Content.Shared.Holodeck.Ui;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.Holodeck.Ui;

[GenerateTypedNameReferences]
public sealed partial class HolodeckSpawnerWindow : FancyWindow
{
    [Dependency] private readonly IEntityManager _entity = default!;
    [Dependency] private readonly IPrototypeManager _prototype = default!;
    private readonly HolodeckSystem _holodeck;

    private static readonly ButtonGroup ScenarioButtonGroup = new();

    public HolodeckSpawnerWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _holodeck = _entity.System<HolodeckSystem>();
    }

    public void UpdateState(EntityUid spawner, HolodeckSpawnerBoundUserInterfaceState state)
    {
        Scenarios.RemoveAllChildren();

        foreach (var scenario in state.Scenarios)
        {
            var button = new HolodeckScenarioButton(scenario, _prototype)
            {
                Group = ScenarioButtonGroup
            };

            button.OnPressed += _ =>
            {
                //if (_holodeck.TryGetScenarioGrid(scenario, out var grid))
            };

            Scenarios.AddChild(button);
        }
    }
}
