using Content.Client.UserInterface.Controls;
using Content.Shared.Holodeck;
using Content.Shared.Holodeck.Ui;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.Holodeck.Ui;

[GenerateTypedNameReferences]
public sealed partial class HolodeckSpawnerWindow : FancyWindow
{
    [Dependency] private readonly IEntityManager _entity = default!;
    [Dependency] private readonly IPrototypeManager _prototype = default!;
    private readonly HolodeckSystem _holodeck;

    private static readonly ButtonGroup ScenarioButtonGroup = new();

    private ProtoId<HolodeckScenarioPrototype>? _selectedScenario;

    public event Action<ProtoId<HolodeckScenarioPrototype>?>? OnScenarioPicked;

    public HolodeckSpawnerWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _holodeck = _entity.System<HolodeckSystem>();
    }

    public void UpdateState(EntityUid spawner, HolodeckSpawnerBoundUserInterfaceState state)
    {
        _selectedScenario = state.SelectedScenario;
        Scenarios.RemoveAllChildren();

        foreach (var scenario in state.Scenarios)
        {
            var button = new HolodeckScenarioButton(scenario, _prototype)
            {
                Group = ScenarioButtonGroup
            };

            if (_selectedScenario == scenario)
                button.Pressed = true;

            button.OnPressed += _ => SetSelectedScenario(scenario);

            Scenarios.AddChild(button);
        }

        GridViewport.Visible = _selectedScenario != null;
    }

    private void SetSelectedScenario(ProtoId<HolodeckScenarioPrototype>? scenario)
    {
        if (_selectedScenario == scenario)
            return;

        _selectedScenario = scenario;

        OnScenarioPicked?.Invoke(scenario);

        SetViewportScenario(scenario);
    }

    private void SetViewportScenario(ProtoId<HolodeckScenarioPrototype>? scenario)
    {
        var isNull = scenario == null;
        GridViewport.Visible = !isNull;

        if (isNull)
            return;

        if (!_holodeck.TryGetScenarioGrid(scenario!.Value, out var grid))
            return;

        if (!_holodeck.TryGetScenarioEye(scenario!.Value, out var eyeData))
            return;

        var (eye, size) = eyeData.Value;

        GridViewport.ViewportSize = size;
        GridViewport.Eye = eye.Comp.Eye;
    }
}
