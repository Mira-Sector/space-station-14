using Content.Client.Modules.ModSuit.Modules;
using Content.Shared.Modules.ModSuit.UI;
using Content.Shared.Modules.ModSuit.UI.Modules;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using System.Linq;

namespace Content.Client.Modules.ModSuit;

[GenerateTypedNameReferences]
public sealed partial class ModSuitWindow : DefaultWindow
{

    #region BuiData

    private KeyValuePair<NetEntity, ModSuitSealablePartBuiEntry>[] _sealableParts = [];
    private KeyValuePair<NetEntity, ModSuitBaseModuleBuiEntry>[] _modules = [];
    private (int, int)? _complexity = null;
    private BaseModSuitPowerBuiEntry? _power = null;

    #endregion

    #region ButtonEvents

    public event Action<Dictionary<NetEntity, bool>>? OnSealButtonPressed;

    // Module buttons
    public event Action<NetEntity, bool>? OnToggleButtonPressed;
    public event Action<NetEntity>? OnEjectButtonPressed;
    public event Action<NetEntity, Color>? OnFlashlightColorChanged;

    #endregion

    public ModSuitWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    public void Refresh()
    {
        RefreshSealableIcons();
        RefreshModules();

        RefreshComplexity();
        RefreshPower();

        RefreshCenterContainer();
    }

    private void RefreshCenterContainer()
    {
        CenterContainer.Visible = ShowCenterContainer();
    }

    private bool ShowCenterContainer()
    {
        if (_complexity != null)
            return true;

        if (_power != null)
            return true;

        return false;
    }

    #region Sealable

    public void UpdateSealed(ModSuitSealableBuiEntry entry)
    {
        if (_sealableParts == entry.Parts)
            return;

        _sealableParts = entry.Parts;
        RefreshSealableIcons();
    }

    private void RefreshSealableIcons()
    {
        SealContainer.Visible = _sealableParts.Any();
        SealPanel.RemoveAllChildren();
        SealButtons.RemoveAllChildren();

        var anyUnsealed = false;

        foreach (var (part, data) in _sealableParts)
        {
            var spriteView = new ModSuitSealableSprite(data.Sprite[data.IsSealed]);
            SealPanel.AddChild(spriteView);

            var button = new ModSuitSealableButton(part, data.IsSealed);
            SealButtons.AddChild(button);

            Dictionary<NetEntity, bool> sealedButtonState = [];
            sealedButtonState.Add(part, !data.IsSealed);
            button.ButtonButton.OnPressed += _ => OnSealButtonPressed?.Invoke(sealedButtonState);

            if (!data.IsSealed)
                anyUnsealed = true;
        }

        if (_sealableParts.Any())
        {
            var allButton = new ModSuitSealableAllButton(!anyUnsealed);
            SealButtons.AddChild(allButton);

            Dictionary<NetEntity, bool> sealedButtonState = [];
            foreach (var (part, data) in _sealableParts)
            {
                if (data.IsSealed == anyUnsealed)
                    continue;

                sealedButtonState[part] = !data.IsSealed;
            }

            allButton.ButtonButton.OnPressed += _ => OnSealButtonPressed?.Invoke(sealedButtonState);
        }
    }

    #endregion

    #region Complexity

    public void UpdateComplexity(ModSuitComplexityBuiEntry entry)
    {
        if (_complexity == entry.Complexity)
            return;

        _complexity = entry.Complexity;
        RefreshComplexity();
        CenterContainer.Visible = true;
    }

    private void RefreshComplexity()
    {
        if (_complexity == null)
        {
            ComplexityLabel.Visible = false;
            return;
        }

        var (complexity, max) = _complexity.Value;
        ComplexityLabel.Text = Loc.GetString("modsuit-interface-complexity", ("complexity", complexity), ("max", max));
        ComplexityLabel.Visible = true;
    }

    #endregion

    #region Power

    public void UpdatePower(BaseModSuitPowerBuiEntry entry)
    {
        if (_power == entry)
            return;

        _power = entry;
        RefreshPower();
        CenterContainer.Visible = true;
    }

    private void RefreshPower()
    {
        ChargeBar.Visible = false;
        NoCellLabel.Visible = false;

        if (_power == null)
            return;

        switch (_power)
        {
            case ModSuitPowerBuiEntry power:
                ChargeBar.MaxValue = power.MaxCharge;
                ChargeBar.Value = power.CurrentCharge;
                ChargeBar.Visible = true;

                ChargeLabel.Text = Loc.GetString("modsuit-interface-charge", ("charge", power.CurrentCharge / power.MaxCharge));
                break;
            case ModSuitPowerNoCellBuiEntry:
                NoCellLabel.Visible = true;
                break;
            default:
                throw new NotImplementedException($"Tried to render {_power.GetType()}.");
        }
    }

    #endregion

    #region Modules

    public void UpdateModules(ModSuitModuleBuiEntry entry)
    {
        if (_modules == entry.Modules)
            return;

        _modules = entry.Modules;
        RefreshModules();
    }

    private void RefreshModules()
    {
        ModuleList.RemoveAllChildren();

        foreach (var (module, data) in _modules)
        {
            // order matters
            // more likely to be parented goes at the bottom
            switch (data)
            {
                case ModSuitFlashlightModuleBuiEntry flashlightEntry:
                    var flashlightPanel = new ModSuitFlashlightModulePanel(module, flashlightEntry);
                    ModuleList.AddChild(flashlightPanel);
                    flashlightPanel.ToggleButton.OnPressed += _ => OnToggleButtonPressed?.Invoke(module, flashlightPanel.ToggleButton.Pressed);
                    flashlightPanel.EjectButton.OnPressed += _ => OnEjectButtonPressed?.Invoke(module);
                    flashlightPanel.ColorSelector.OnColorChanged += (color) => OnFlashlightColorChanged?.Invoke(module, color);
                    break;

                case ModSuitBaseToggleableModuleBuiEntry toggleableEntry:
                    var toggleablePanel = new ModSuitBaseToggleableModulePanel(module, toggleableEntry);
                    ModuleList.AddChild(toggleablePanel);
                    toggleablePanel.ToggleButton.OnPressed += _ => OnToggleButtonPressed?.Invoke(module, toggleablePanel.ToggleButton.Pressed);
                    toggleablePanel.EjectButton.OnPressed += _ => OnEjectButtonPressed?.Invoke(module);
                    break;

                case ModSuitBaseModuleBuiEntry baseEntry:
                    var basePanel = new ModSuitBaseModulePanel(module, baseEntry);
                    ModuleList.AddChild(basePanel);
                    basePanel.EjectButton.OnPressed += _ => OnEjectButtonPressed?.Invoke(module);
                    break;

                default:
                    throw new NotImplementedException($"Tried to convert {data.GetType()} to a panel which does not exist.");
            }
        }
    }

    #endregion
}
