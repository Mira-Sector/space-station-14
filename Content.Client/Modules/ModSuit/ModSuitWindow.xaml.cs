using Content.Shared.Modules.ModSuit.UI;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using System.Linq;

namespace Content.Client.Modules.ModSuit;

[GenerateTypedNameReferences]
public sealed partial class ModSuitWindow : DefaultWindow
{
    private KeyValuePair<NetEntity, ModSuitSealableBuiEntry>[] _sealableParts = [];

    public event Action<NetEntity, bool>? OnSealButtonPressed;

    public ModSuitWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    public void Refresh()
    {
        RefreshSealableIcons();
    }

    #region Sealable

    public void UpdateSealed(ModSuitSealableBoundUserInterfaceState state)
    {
        _sealableParts = state.Parts;
        RefreshSealableIcons();
    }

    internal void RefreshSealableIcons()
    {
        SealContainer.Visible = _sealableParts.Any();
        SealPanel.RemoveAllChildren();
        SealButtons.RemoveAllChildren();

        foreach (var (part, data) in _sealableParts)
        {
            var spriteView = new ModSuitSealableSprite(data.Sprite[data.IsSealed]);
            SealPanel.AddChild(spriteView);

            var button = new ModSuitSealableButton(part, data.IsSealed);
            SealButtons.AddChild(button);

            button.ButtonButton.OnPressed += _ => OnSealButtonPressed?.Invoke(part, !data.IsSealed);
        }
    }

    #endregion
}
